{"path":"components/field","templateID":7,"sharedPropsHashes":{"parentComponent":"2hCE74"},"localProps":{"component":{"name":"Field","url":"field","componentKey":"field","editorHeight":"620px","description":"A field allows a user to edit text, and provides a label and error message. Fields work with Inputs and Textareas.","component":"src/components/component-doc","materialDocsLink":"https://material.io/design/components/text-fields.html"},"markdown":"## Usage\n\n```jsx\nimport { Field } from 'materialish';\nimport 'materialish/materialish.css';\n```\n\n# `Field`\n\n## Props\n\n| Prop Name | Default Value | Description                                                        |\n| --------- | ------------- | ------------------------------------------------------------------ |\n| className |               | Additional class name(s) to add to the menu item                   |\n| required  | false         | Whether or not the value that this field represents is required    |\n| children  |               | Render the Input, Label, and ErrorMessage as children              |\n| ...rest   |               | The rest of the props are spread on the underlying `label` element |\n\n## CSS Variables\n\n| Variable                   | Default Value | Description                                                            |\n| -------------------------- | ------------- | ---------------------------------------------------------------------- |\n| --mt-baseFontSize          | 1rem          | The text size and dimensions of the button are based off of this value |\n| --mt-fontFamily            | 'Roboto'      | The font family to use for the button text                             |\n| --mt-field-labelColor      | #757575       | The color of the `Field.Label` text                                    |\n| --mt-field-labelErrorColor | #f34335       | The color of the `Field.ErrorMessage` text                             |\n\n# `Field.Input`\n\nThis is an alias of [**Input**](/components/input).\n\n# `Field.TextArea`\n\nThis is an alias of [**TextArea**](/components/text-area).\n\n# `Field.Label`\n\n## Props\n\n| Prop Name | Default Value | Description                                            |\n| --------- | ------------- | ------------------------------------------------------ |\n| className |               | Additional class name(s) to add to the menu item       |\n| children  |               | The value to display as the label                      |\n| ...rest   |               | The other props are spread onto the underlying element |\n\n# `Field.ErrorMessage`\n\n## Props\n\n| Prop Name | Default Value | Description                                            |\n| --------- | ------------- | ------------------------------------------------------ |\n| className |               | Additional class name(s) to add to the menu item       |\n| children  |               | The message to display as the error                    |\n| ...rest   |               | The other props are spread onto the underlying element |\n","example":"class FieldExample extends Component {\n  render() {\n    const { value, isEmpty } = this.state;\n\n    return (\n      <Field required>\n        <Field.Label>Place of Residence</Field.Label>\n        <Field.Input error={isEmpty} onChange={this.onChange} value={value} />\n        {isEmpty && (\n          <Field.ErrorMessage>\n            Place of residence is required.\n          </Field.ErrorMessage>\n        )}\n      </Field>\n    );\n  }\n\n  state = {\n    value: 'Paris, France',\n    isEmpty: false,\n  };\n\n  onChange = e => {\n    this.setState({\n      value: e.target.value,\n      isEmpty: e.target.value.length === 0,\n    });\n  };\n}\n\nreturn <FieldExample />;\n"}}
