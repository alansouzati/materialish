{"path":"philosophy","templateID":1,"sharedPropsHashes":{},"localProps":{"philosophyMarkdown":"# Philosophy\n\nUnderstanding the philosophy of Materialish can help you to use it successfully.\n\n## Visual Components\n\nMaterialish's goal is to provide **visual components** with a Material Design-like\nappearance.\n\nWhat this means is that it is not always the case that the components will provide all\nof the **interactions** that you need.\n\nFor example, the modals in Materialish do not include features such as scroll locking, animations,\nfocus trapping, or fixed positioning. This is an intentional omission, and there are several reasons\nfor Materialish's focus on visual components.\n\nOne reason is **longevity**. New patterns and APIs frequently emerge in the React\necosystem that provide improved solutions to old problems. By separating out the visual components\nfrom trending implementation patterns, we hope to increase the library's lifespan.\n\nA second reason is **flexibility**. The unique requirements of applications often necessitate\nspecific implementation details that can be difficult to abstract. Consider dropdown menus. It would be\nimpossible for Materialish to provide a single functional dropdown, or even a collection of functional dropdowns,\nthat solve the needs of every application out there.\n\nWhat Materialish can (and does) do is provide a common visual languages to support the wide variety of\ninteractions you see in components like dropdowns. With these visual components, you can add interactions to a\ndropdown as needed. You may recognize the value in separating these distinct concerns if you have ever struggled\nto change the interaction of a component that provides interactions for you.\n\nWe recognize that you cannot build an application without interactions, and we plan to provide guides and examples\nthat demonstrate how to add common interactions to Materialish components, but they do not exist at this time.\n\nGenerally, our preferred method for introducing interactions is through **render prop components** that do not\nrender to the DOM themelves. One example is the [Downshift](https://github.com/paypal/downshift) library, which is\na great solution to implement dropdowns and autocompletes.\n\n## Visual Design Sources\n\nMaterialish's visual design is influenced by several sources:\n\n1.  the official Material Design guidelines\n2.  Netflix's internal, nascent Quasar styleguide\n3.  The authors' own preferences\n\nMaterialish visual language is dynamic, and will continue to change and adapt as time goes on.\n\n## Customization\n\nTheming and extensive customization of the visual language of Materialish components is not a design\nconsideration of the library. Although the library supports \"basic\" adjustments, such as the primary color,\nbase font size, sizing, and font, you will fight the library if you attempt to make more drastic changes to\nthe visual appearance of the components.\n\nIf the out-of-the-box visual appearance of Materialish does not align with your requirements, then it\nmay not be the right solution for your project.\n\n## Implementation\n\nMaterialish is meant to be **lightweight** and **unopinionated**. You should be able to use Materialish\nas long as your application can render React components and load CSS files.\n\nWhen it comes to CSS, Materialish uses \"plain\" CSS with a [BEM](http://getbem.com/) class naming convention to\nreduce the likelihood of collisions. Whenever possible, we strive to keep the specificity of selectors\nlow so that you can more easily override styles when needed.\n\nThe authors recognize the growing popularity of CSS-in-JS, so we feel the need to add a note about our decision\nto _not_ use CSS-in-JS.\n\nMost importantly, we do not believe that using CSS-in-JS would have provided any value over using \"plain\" CSS,\ngiven the project's design goals.\n\nSecondly, different CSS-in-JS libraries have different APIs. Choosing any one library increases the overall\nlearning curve of Materialish if we were to to expose that API publicly.\n\nThirdly, the CSS-in-JS space is evolving rapidly. There is no way to know which library will win the overall market share\nover the next few years, so we believe it is a risk to adopt any one library at this time.\n\nBy implementing Materialish using plain CSS, we believe that the library is more likely to remain useful for a longer period\nof time, with fewer large refactors.\n\n## Browser Support\n\nMaterialish is built for internal applications at Netflix, which affords us the ability to target newer\nbrowsers only.\n\nIf your project requires support for older, or legacy browsers, then Materialish may not be the right solution.\n\n## Small Screens Support\n\nMaterialish was built for an internal suite of applications at Netflix. At this time, small screens support is not a priority.\nTypically, we won't do anything that completely breaks a small screen device (if we do, let us know). Instead, what this means is\nthat some parts of Materialish won't be optimized for small screens.\n\nPerhaps the best example of this is the Table component. It isn't responsive.\n\nOur small screen support is in some ways embodied by this very website. Although it _generally_ works on small screens, there are some\nimprovements that we would like to make to it.\n"}}
